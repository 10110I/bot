
import time
from aiogram import  Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import requests
from bs4 import BeautifulSoup
import lxml

napr_callback = CallbackData('napr','pars')

bot = Bot(token='5577587269:AAEDbk_fSaro5v0wf8-4H6keer0xhIXRJWI')
dp = Dispatcher(bot,storage=MemoryStorage())



class Orderparser(StatesGroup):
    waiting_diraction = State()
    waiting_ball = State()

class SNYLSpars(StatesGroup):
    waiting_snils_dir = State()
    waiting_snils_num = State()

@dp.message_handler(commands='start')
async def start(message: types.Message):
    markup = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å',callback_data='premenu2')
    markup.add(item1)
    await bot.send_message(message.from_user.id,'‚òÄÔ∏è\n –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –°–ü–ë–ì–£–¢ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º –æ–±—É—á–µ–Ω–∏—è "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" –∏ "–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç", –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ –±—é–¥–∂–µ—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ.\n \n –Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å: \n     1) C–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ –≤–∞–º–∏ —á–µ–ª–æ–≤–µ–∫ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞ –∏ —Å–æ–≥–ª–∞—Å–∏–µ–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤, —á–µ–º —É –≤–∞—Å \n     2) –ù–∞–π—Ç–∏ —Å–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ –°–ù–ò–õ–° \n \n –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start .–ï—ë –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏, –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ MENU',reply_markup=markup)

@dp.callback_query_handler(text='premenu', state='*')
async def start_menu(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=2)
    item1 = InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ –°–ù–ò–õ–° üîé',callback_data='SNYLS')
    item2 = InlineKeyboardButton(text='–ü–æ–¥—Å—á–µ—Ç –º–µ—Å—Ç üìã', callback_data='start1')
    markup.add(item1,item2)
    await bot.send_message(callback.message.chat.id, 'üìí –ú–µ–Ω—é | –í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:',reply_markup=markup)

@dp.callback_query_handler(text='premenu2', state='*')
async def start_menu(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=2)
    item1 = InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ –°–ù–ò–õ–° üîé',callback_data='SNYLS')
    item2 = InlineKeyboardButton(text='–ü–æ–¥—Å—á–µ—Ç –º–µ—Å—Ç üìã', callback_data='start1')
    markup.add(item1,item2)
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text = 'üìí –ú–µ–Ω—é | –í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:' ,reply_markup=markup)

#------------------------

@dp.callback_query_handler(text='SNYLS', state='*')
async def snyls(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    markup = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton(text='–†–¢–°  üü• ', callback_data='snapr–†–¢–°')
    item2 = InlineKeyboardButton(text='–ò–°–∏–¢ üü™', callback_data='snapr–ò–°–∏–¢')
    item3 = InlineKeyboardButton(text='–ò–ö–°–° üüß', callback_data='snapr–ò–ö–°–°')
    item4 = InlineKeyboardButton(text='–§–ü–ü üü´', callback_data='snapr–§–ü–ü')
    item5 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='premenu2')
    markup.add(item1, item2, item3, item4,item5)
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', reply_markup=markup)


@dp.callback_query_handler(Text(startswith='snapr'),state='*')
async def check_napr_snyls(callback: types.CallbackQuery):
    if callback.data == 'snapr–†–¢–°':
        markup2 = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='05.03.06', callback_data='000000194')
        item2 = InlineKeyboardButton(text='11.03.01', callback_data='000000198')
        item3 = InlineKeyboardButton(text='11.03.02', callback_data='000000202')
        item4 = InlineKeyboardButton(text='11.03.03', callback_data='000000206')
        item5 = InlineKeyboardButton(text='12.03.04', callback_data='000000210')
        item6 = InlineKeyboardButton(text='11.05.04', callback_data='000000214')
        item7 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='SNYLS')

        markup2.add(item1,item2,item3,item4,item5,item6,item7)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',reply_markup=markup2)
        await SNYLSpars.waiting_snils_dir.set()
    elif callback.data == 'snapr–ò–ö–°–°':
        markup2 = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='09.03.01', callback_data='000000218')
        item2 = InlineKeyboardButton(text='09.03.04', callback_data='000000222')
        item3 = InlineKeyboardButton(text='10.03.01', callback_data='000000226')
        item4 = InlineKeyboardButton(text='11.03.02', callback_data='000000230')
        item5 = InlineKeyboardButton(text='12.03.03', callback_data='000000234')
        item6 = InlineKeyboardButton(text='10.05.02', callback_data='000000238')
        item7 = InlineKeyboardButton(text='11.05.04', callback_data='000000242')
        item8 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='SNYLS')
        markup2.add(item1,item2,item3,item4,item5,item6,item7,item8)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',reply_markup=markup2)
        await SNYLSpars.waiting_snils_dir.set()
    elif callback.data == 'snapr–ò–°–∏–¢':
        markup2 = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='09.03.02 –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='000000246')
        item2 = InlineKeyboardButton(text='09.03.02 –ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='000000250')
        item3 = InlineKeyboardButton(text='09.03.02 –î–∏–∑–∞–π–Ω –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º', callback_data='000000254')
        item4 = InlineKeyboardButton(text='09.03.02 –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º', callback_data='000000394')
        item5 = InlineKeyboardButton(text='27.03.04', callback_data='000000259')
        item6 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='SNYLS')
        markup2.add(item1,item2,item3,item4,item5,item6)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',reply_markup=markup2)
        await SNYLSpars.waiting_snils_dir.set()
    elif callback.data == 'snapr–§–ü–ü':
        markup2 = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='11.03.04', callback_data='000000263')
        item2 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='SNYLS')
        markup2.add(item1,item2)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',reply_markup=markup2)
        await SNYLSpars.waiting_snils_dir.set()

@dp.callback_query_handler(Text(startswith='00000'),state= SNYLSpars.waiting_snils_dir)
async def choose_napr_snyls(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(choose_direction_snyls = callback.data)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    await bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–Ω–∏–ª—Å, –ø–æ —Ñ–æ—Ä–º–µ 123-321-123 12')
    await SNYLSpars.waiting_snils_num.set()

@dp.message_handler(state=SNYLSpars.waiting_snils_num)
async def choose_nums(message: types.Message, state: FSMContext):
    await state.update_data(choose_num=message.text.lower())
    await message.answer('–í–µ–¥–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö üí¨')
    user_data = await state.get_data()
    direction_snyls = user_data['choose_direction_snyls']
    snyls_num = user_data['choose_num']
    await start_parsing_snyls(snyls_num, direction_snyls, message)
    await state.finish()

#------------------------------------–ü–æ–¥—Å—á–µ—Ç –º–µ—Å—Ç

@dp.callback_query_handler(text='start1', state='*')
async def start_nachalo(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    markup = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton(text='–†–¢–° üü•', callback_data='napr–†–¢–°')
    item2 = InlineKeyboardButton(text='–ò–°–∏–¢ üü™', callback_data='napr–ò–°–∏–¢')
    item3 = InlineKeyboardButton(text='–ò–ö–°–° üüß', callback_data='napr–ò–ö–°–°')
    item4 = InlineKeyboardButton(text='–§–ü–ü üü´', callback_data='napr–§–ü–ü')
    item5 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='premenu2')
    markup.add(item1, item2, item3, item4,item5)
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', reply_markup=markup)

@dp.callback_query_handler(Text(startswith='napr'),state='*')
async def check_napr(callback: types.CallbackQuery):
    if callback.data == 'napr–†–¢–°':
        markup2 = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='05.03.06', callback_data='000000194')
        item2 = InlineKeyboardButton(text='11.03.01', callback_data='000000198')
        item3 = InlineKeyboardButton(text='11.03.02', callback_data='000000202')
        item4 = InlineKeyboardButton(text='11.03.03', callback_data='000000206')
        item5 = InlineKeyboardButton(text='12.03.04', callback_data='000000210')
        item6 = InlineKeyboardButton(text='11.05.04', callback_data='000000214')
        item7 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='start1')
        markup2.add(item1,item2,item3,item4,item5,item6,item7)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',reply_markup=markup2)
        await Orderparser.waiting_diraction.set()
    elif callback.data == 'napr–ò–ö–°–°':
        markup2 = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='09.03.01', callback_data='000000218')
        item2 = InlineKeyboardButton(text='09.03.04', callback_data='000000222')
        item3 = InlineKeyboardButton(text='10.03.01', callback_data='000000226')
        item4 = InlineKeyboardButton(text='11.03.02', callback_data='000000230')
        item5 = InlineKeyboardButton(text='12.03.03', callback_data='000000234')
        item6 = InlineKeyboardButton(text='10.05.02', callback_data='000000238')
        item7 = InlineKeyboardButton(text='11.05.04', callback_data='000000242')
        item8 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='start1')
        markup2.add(item1,item2,item3,item4,item5,item6,item7,item8)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',reply_markup=markup2)
        await Orderparser.waiting_diraction.set()
    elif callback.data == 'napr–ò–°–∏–¢':
        markup2 = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='09.03.02 –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='000000246')
        item2 = InlineKeyboardButton(text='09.03.02 –ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='000000250')
        item3 = InlineKeyboardButton(text='09.03.02 –î–∏–∑–∞–π–Ω –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º', callback_data='000000254')
        item4 = InlineKeyboardButton(text='09.03.02 –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º', callback_data='000000394')
        item5 = InlineKeyboardButton(text='27.03.04', callback_data='000000259')
        item6 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='start1')

        markup2.add(item1,item2,item3,item4,item5,item6)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',reply_markup=markup2)
        await Orderparser.waiting_diraction.set()
    elif callback.data == 'napr–§–ü–ü':
        markup2 = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='11.03.04', callback_data='000000263')
        item2 = InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='start1')
        markup2.add(item1,item2)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',reply_markup=markup2)
        await Orderparser.waiting_diraction.set()


@dp.callback_query_handler(Text(startswith='00000'),state= Orderparser.waiting_diraction)
async def choose_napr(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(choose_direction = callback.data)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    msg = await bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–ª–ª–æ–≤, —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π')
    await Orderparser.waiting_ball.set()

@dp.message_handler(state=Orderparser.waiting_ball)
async def choose_ball(message: types.Message, state: FSMContext):
    await state.update_data(choose_ball=message.text.lower())
    await message.answer('–í–µ–¥–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö üí¨')
    user_data = await state.get_data()
    direction = user_data['choose_direction']
    ball = user_data['choose_ball']
    await start_parsing(ball, direction, message)
    await state.finish()

async def start_parsing(ball,direction,message):
    try:
        k = 0
        cookies = {
            'top100_id': 't1.-1.1257815121.1659005952933',
            '_ym_d': '1659005953',
            '_ym_uid': '1659005953948842883',
            'PHPSESSID': '56utcnrn697iuaulmjoppls601',
            '_ym_isad': '2',
            '_ym_visorc': 'w',
            'last_visit': '1661173520897%3A%3A1661184320897',
            't3_sid_-1': 's1.351532153.1661183531566.1661184320907.7.7.25.1',
        }

        headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Cache-Control': 'max-age=0',
            'Connection': 'keep-alive',
            # Requests sorts cookies= alphabetically
            # 'Cookie': 'top100_id=t1.-1.1257815121.1659005952933; _ym_d=1659005953; _ym_uid=1659005953948842883; PHPSESSID=56utcnrn697iuaulmjoppls601; _ym_isad=2; _ym_visorc=w; last_visit=1661173520897%3A%3A1661184320897; t3_sid_-1=s1.351532153.1661183531566.1661184320907.7.7.25.1',
            'Origin': 'http://priem.sut.ru',
            'Referer': 'http://priem.sut.ru/konkursnie-otbori',
            'Upgrade-Insecure-Requests': '1',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36',
        }

        data = {
            'general': '101',
            'education_base_to': '3',
            'training_form': '4',
            'training_type': '4',
            '1cunv_groupab': str(direction),
            'action': 'get_result',
            'rekzach': '1',
        }

        response = requests.post('http://priem.sut.ru/konkursnie-otbori', cookies=cookies, headers=headers, data=data,
                                 verify=False)
        soup = BeautifulSoup(response.text, 'lxml')
        name_direction = soup.find('th', colspan="10").text
        prikaz_ = soup.find_all('th')
        prikaz = []
        for name in prikaz_:
            prikaz.append(name.text)
        prikaz = str(prikaz[-1])
        all_td = soup.find_all('td')
        tr_list = []
        for tr in all_td:
            tr_list.append(tr.text)
        count_finall_position = tr_list[3]
        if tr_list[0] == '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞:':
            tr_list = tr_list[6:]
        else:
            tr_list = tr_list

        if prikaz == '–ü—Ä–∏–∫–∞–∑ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏':
            zip_tr_list = zip(*[iter(tr_list)] * 10)
            list_tr_list = list(zip_tr_list)
        else:
            zip_tr_list = zip(*[iter(tr_list)] * 9)
            list_tr_list = list(zip_tr_list)
            k += 1
        l = 0
        for x in range(int(count_finall_position)):
            ab = list_tr_list[x]
            if int(ab[2]) >= int(ball) and ab[6] == '–î–∞' and ab[7] == '–î–∞' and k == 1:
                l += 1
            elif int(ab[2]) >= int(ball) and ab[7] == '–î–∞' and ab[8] == '–î–∞' and k == 0:
                l += 1
        before = int(count_finall_position) - l
        if before < 0:
            before = 0
        else:
            before = before
        after = l + 1
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='–ú–µ–Ω—é üìí',callback_data='premenu')
        markup.add(item1)
        if before > 0:
            await message.answer('‚òëÔ∏è | '+str(name_direction) + '–í–∞—à –±–∞–ª–ª: ' + str(ball) + ', –µ—Å–ª–∏ –≤—ã –ø–æ–¥–∞–¥–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ —Å–æ–≥–ª–∞—Å–∏–µ, —Ç–æ –±—É–¥–µ—Ç–µ –Ω–∞ '+str(after) + ' –º–µ—Å—Ç–µ –∏–∑ '+ str(count_finall_position) + '. –ó–∞–ø–∞—Å –≤  ' + str(before- 1)+ ' —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –≤–∞—Å, —É–¥–∞—á–∏ !'+'\n P.S /// –î–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—á–∏—Ç–∞–µ—Ç —Ö—É–¥—à–∏–π –∏—Å—Ö–æ–¥',reply_markup=markup)
        else:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å –≤–∞—à–∏–º –±–∞–ª–ª–æ–º ' + str(ball) + ' –≤—ã –≤–Ω–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–∞ –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ ;(',reply_markup=markup)
    except:
        markup1= InlineKeyboardMarkup(row_width=2)
        item2 = InlineKeyboardButton(text='–ó–∞–Ω–æ–≤–æ üîÅ',callback_data='start1')
        item3 = InlineKeyboardButton(text = '–ú–µ–Ω—é üìí', callback_data= 'premenu2')
        markup1.add(item2,item3)
        await message.answer('‚ùå | –î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ª–∏–±–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–π—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –º–µ–Ω—é:',reply_markup=markup1)


async def start_parsing_snyls(snyls_num,direction_snyls,message):
    try:

        k = 0
        cookies = {
            'top100_id': 't1.-1.1257815121.1659005952933',
            '_ym_d': '1659005953',
            '_ym_uid': '1659005953948842883',
            'PHPSESSID': '56utcnrn697iuaulmjoppls601',
            '_ym_isad': '2',
            '_ym_visorc': 'w',
            'last_visit': '1661173520897%3A%3A1661184320897',
            't3_sid_-1': 's1.351532153.1661183531566.1661184320907.7.7.25.1',
        }

        headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Cache-Control': 'max-age=0',
            'Connection': 'keep-alive',
            # Requests sorts cookies= alphabetically
            # 'Cookie': 'top100_id=t1.-1.1257815121.1659005952933; _ym_d=1659005953; _ym_uid=1659005953948842883; PHPSESSID=56utcnrn697iuaulmjoppls601; _ym_isad=2; _ym_visorc=w; last_visit=1661173520897%3A%3A1661184320897; t3_sid_-1=s1.351532153.1661183531566.1661184320907.7.7.25.1',
            'Origin': 'http://priem.sut.ru',
            'Referer': 'http://priem.sut.ru/konkursnie-otbori',
            'Upgrade-Insecure-Requests': '1',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36',
        }

        data = {
            'general': '101',
            'education_base_to': '3',
            'training_form': '4',
            'training_type': '4',
            '1cunv_groupab': str(direction_snyls),
            'action': 'get_result',
            'rekzach': '1',
        }

        response = requests.post('http://priem.sut.ru/konkursnie-otbori', cookies=cookies, headers=headers, data=data,
                                 verify=False)
        soup = BeautifulSoup(response.text, 'lxml')
        name_direction = soup.find('th', colspan="10").text
        prikaz_ = soup.find_all('th')
        prikaz = []
        for name in prikaz_:
            prikaz.append(name.text)
        prikaz = str(prikaz[-1])
        all_td = soup.find_all('td')
        tr_list = []
        for tr in all_td:
            tr_list.append(tr.text)
        count_finall_position = tr_list[3]
        if tr_list[0] == '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞:':
            tr_list = tr_list[6:]
        else:
            tr_list = tr_list

        if prikaz == '–ü—Ä–∏–∫–∞–∑ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏':
            zip_tr_list = zip(*[iter(tr_list)] * 10)
            list_tr_list = list(zip_tr_list)
        else:
            zip_tr_list = zip(*[iter(tr_list)] * 9)
            list_tr_list = list(zip_tr_list)
            k += 1
        l = 0

        for x in range(int(count_finall_position)):
            pos = 0
            ab = list_tr_list[x]
            pos = ab[0]
            if ab[1] == str(snyls_num) and int(pos) <= int(count_finall_position):
                position = pos
                break
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text='–ú–µ–Ω—é üìí ', callback_data='premenu')
        markup.add(item1)
        await message.answer('‚òëÔ∏è | –í–∞—à –°–ù–ò–õ–°: ' + str(snyls_num) + '\n –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: ' + str(position) + '/' + str(count_finall_position),reply_markup=markup)

    except:
        markup1 = InlineKeyboardMarkup(row_width=2)
        item2 = InlineKeyboardButton(text='–ó–∞–Ω–æ–≤–æ üîÅ', callback_data='SNYLS')
        item3 = InlineKeyboardButton(text='–ú–µ–Ω—é üìí', callback_data='premenu2')
        markup1.add(item2,item3)
        await message.answer('‚ùå | –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –º–µ–Ω—é',reply_markup=markup1)


executor.start_polling(dp, skip_updates=True)